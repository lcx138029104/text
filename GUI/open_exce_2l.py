# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'open_exce_2l.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import pandas as pd
from PyQt5.QtWidgets import QFileDialog, QApplication



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(530, 403)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(20, 10, 501, 341))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setObjectName("pushButton")
        self.formLayout.setWidget(
            0, QtWidgets.QFormLayout.LabelRole, self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.formLayout.setWidget(
            1, QtWidgets.QFormLayout.LabelRole, self.pushButton_2)
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")
        self.formLayout.setWidget(
            0, QtWidgets.QFormLayout.FieldRole, self.label)
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(
            1, QtWidgets.QFormLayout.FieldRole, self.label_2)
        self.gridLayout.addLayout(self.formLayout, 0, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.widget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.gridLayout.addLayout(self.horizontalLayout, 1, 0, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(self.widget)
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout.addWidget(self.textBrowser, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 530, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.openImage)
        self.pushButton_2.clicked.connect(self.loadImage)
        self.pushButton_3.clicked.connect(self.Split_chronological_account)
        self.pushButton_4.clicked.connect(self.Split_chronological_account_2)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "序时账拆分"))
        self.pushButton.setText(_translate("MainWindow", "待拆分"))
        self.pushButton_2.setText(_translate("MainWindow", "拆分完成"))
        self.label.setText(_translate("MainWindow", "\\选择待拆分序时账"))
        self.label_2.setText(_translate("MainWindow", "选择提前准备好的空Excel"))
        self.pushButton_3.setText(_translate("MainWindow", "情况1"))
        self.pushButton_4.setText(_translate("MainWindow", "情况2"))
        self.textBrowser.setHtml(
            _translate(
                "MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">这里将会显示拆分过程</p>\n"
                "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">如果3分钟还没显示</p>\n"
                "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">那就程序出问题了</p>\n"
                "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">关掉重来</p></body></html>"))
        self.menu.setTitle(_translate("MainWindow", "使用说明"))

    def openImage(self):  # 选择本地图片上传
        global imgName  # 这里为了方便别的地方引用路径，我们把它设置为全局变量
        imgName, imgType = QFileDialog.getOpenFileName(
            self.centralwidget, '打开文件', '.', 'excel文件(*.xls *.xlsx)')
        # 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型
        self.label.setText(imgName)  # 显示所选图片的本地路径

    def loadImage(self):
        global imgName_2
        imgName_2, imgType_2 = QFileDialog.getOpenFileName(
            self.centralwidget, '打开文件', '.', 'excel文件(*.xls *.xlsx)')
        self.label_2.setText(imgName_2)

    def Split_chronological_account(self,imgName, imgName_2):

        data = pd.read_excel(io=imgName)  # 获取需要拆分的序时账path
        data_df = data['科目名称'].str.split(r'-', expand=True)  # 拆分科目名称列
        data_0 = pd.concat([data, data_df], axis=1)  # 将拆分过后的data_0合并到序时账里面

        rows = data_0.shape[0]  # 获取行数 shape[1]获取列数
        department_list = []  # 预处理每个科目数据列表
        df_list = []  # 预处理建表名称

        data2 = pd.DataFrame(data_0[0])  # 获取科目名称所在列
        data3 = data2.drop_duplicates(
            subset=None, keep='last', inplace=False)  # 去重
        department_list = list(data3[0])  # 去处重复的科目名称
        n = len(department_list)  # 获取科目名称数量，建表预处理过程

        # 根据每个一级科目创建一个DataFrame
        names = locals()
        for i in range(n):
            names['n' + str(i)] = pd.DataFrame()
            df_list.append(names['n' + str(i)])

        # 把每个一级科目对应的行数据写入预处理的科目DataFrame
        for department in range(n):
            for i in range(0, rows):
                if data_0[0][i] == department_list[department]:
                    df_list[department] = pd.concat(
                        [df_list[department], data_0.iloc[[i], :]], axis=0, ignore_index=True)

        writer = pd.ExcelWriter(path=imgName_2)  # 利用pd.ExcelWriter()存多张sheets

        # 写入数据
        for i in range(n):
            df_list[i].to_excel(
                writer,
                sheet_name=str(
                    department_list[i]),
                index=False)  # 去掉index列
            print('正在导入', i)

        writer.save()

    def Split_chronological_account_2(self,imgName, imgName_2):

        data = pd.read_excel(io=imgName)  # 获取需要拆分的序时账path
        data_df = data['科目名称'].str.split(r'\\', expand=True)  # 拆分科目名称列
        data_0 = pd.concat([data, data_df], axis=1)  # 将拆分过后的data_0合并到序时账里面

        rows = data_0.shape[0]  # 获取行数 shape[1]获取列数
        department_list = []  # 预处理每个科目数据列表
        df_list = []  # 预处理建表名称

        data2 = pd.DataFrame(data_0[1])  # 获取一级科目所在列
        data3 = data2.drop_duplicates(
            subset=None, keep='last', inplace=False)  # 去重
        department_list = list(data3[1])  # 去处重复的科目名称
        n = len(department_list)  # 获取科目名称数量，建表预处理过程

        # 根据每个一级科目创建一个DataFrame
        names = locals()
        for i in range(n):
            names['n' + str(i)] = pd.DataFrame()
            df_list.append(names['n' + str(i)])

        # 把每个一级科目对应的行数据写入预处理的科目DataFrame
        for department in range(n):
            for i in range(0, rows):
                if data_0[0][i] == department_list[department]:
                    df_list[department] = pd.concat(
                        [df_list[department], data_0.iloc[[i], :]], axis=0, ignore_index=True)

        writer = pd.ExcelWriter(path=imgName_2)  # 利用pd.ExcelWriter()存多张sheets

        # 写入数据
        for i in range(n):
            df_list[i].to_excel(
                writer,
                sheet_name=str(
                    department_list[i]),
                index=False)  # 去掉index列
            print('正在导入', i)

        writer.save()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    formObj = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(formObj)
    formObj.show()
    sys.exit(app.exec_())
